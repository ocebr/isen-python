include:
  - component: $CI_SERVER_FQDN/components/sast/sast@2.1.0
    inputs:
      excluded_paths: "unit_tests/,integration_tests/"
  - component: $CI_SERVER_FQDN/components/container-scanning/container-scanning@4.2.0
    inputs:
      stage: scan
      cs_image: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA


stages:
  - lint
  - test
  - build
  - test-e2e
  - scan

variables:
  IMAGE_SOURCE: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  
pylint:
  stage: lint
  image: python:3.9-slim
  variables:
    # Pylint needs to be configured with django plugins to detect django lint issue
    PYLINT_CONFIG: "--load-plugins=pylint_django  --django-settings-module=Project.settings  --disable=C,R0801"
  before_script:
    - mkdir -p public/badges public/lint
    - echo undefined > public/badges/$CI_JOB_NAME.score
    # Install pylint-gitlab plugin https://pypi.org/project/pylint-gitlab/
    - pip install pylint-gitlab pylint-django
    # Do not forget to install your code dependency otherwise, you will get import errors
    - pip install -r requirements.txt
    - apt update
    - apt install -y bc
  script:
    # execute pylint to have the score
    - pylint --exit-zero $PYLINT_CONFIG  --output-format=text $(find -type f -name "*.py" ! -path "**/.venv/**") | tee /tmp/pylint.txt
    - sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' /tmp/pylint.txt > public/badges/$CI_JOB_NAME.score
    # Execute pylint to have code quality Gitlab report
    - pylint --exit-zero $PYLINT_CONFIG --output-format=pylint_gitlab.GitlabCodeClimateReporter $(find -type f -name "*.py" ! -path "**/.venv/**") > codeclimate.json
    # execute pylint to have a html report
    - pylint --exit-zero $PYLINT_CONFIG --output-format=pylint_gitlab.GitlabPagesHtmlReporter $(find -type f -name "*.py" ! -path "**/.venv/**") > public/lint/index.html
    - |
      echo "Your score is: $(cat public/badges/$CI_JOB_NAME.score)"
      if [ "$(echo "$(cat public/badges/pylint.score) < 8"| bc)" -eq 1 ]; then
          echo "Pylint score is less than 8, failing the job.";
          exit 1;
      fi
  after_script:
    - anybadge --overwrite --label $CI_JOB_NAME --value=$(cat public/badges/$CI_JOB_NAME.score) --file=public/badges/$CI_JOB_NAME.svg 4=red 6=orange 8=yellow 10=green
  artifacts:
    paths:
      # Put in artifact the html report and the badge
      - public
    reports:
      # Give Gitlab the code quality report to be displayed in merge request
      codequality: codeclimate.json
  rules:
    - when: always

docker-hadolint:
  stage: lint
  image: hadolint/hadolint:v2.12.0-alpine
  script:
    - mkdir -p reports
    - hadolint -f gitlab_codeclimate Dockerfile > reports/hadolint-$(md5sum Dockerfile | cut -d" " -f1).json
  artifacts:
    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    expire_in: 1 day
    when: always
    reports:
      codequality:
        - "reports/*"
    paths:
      - "reports/*"
  rules:
    - when: always

pytest_unit:
  stage: test
  image: python:3.9-slim
  before_script:
    - pip install -r requirements.txt
    - pip install pytest-gitlab-code-quality
  script:
    - python -m pytest unit_tests/ --gitlab-code-quality-report=pytest-warnings-unit.json
  artifacts:
    reports:
      codequality: pytest-warnings-unit.json
  rules:
    - when: always

pytest_integration:
  stage: test
  image: python:3.9-slim
  before_script:
    - pip install -r requirements.txt
    - pip install pytest-gitlab-code-quality
  script:
    - python -m pytest integration_tests/ --gitlab-code-quality-report=pytest-warnings-integration.json
  artifacts:
    reports:
      codequality: pytest-warnings-integration.json
  rules:
    - when: always

semgrep-sast:
  rules:
    - when: always

build:
  image: docker:20.10.16
  stage: build
  services:
    - name: docker:20.10.16-dind
      alias: docker
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""

  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
    - docker build -t $IMAGE_SOURCE -f Dockerfile .
    - docker push $IMAGE_SOURCE
  rules:
    - when: always

generating_sbom:
  stage: build
  image: debian:stable-slim
  before_script:
    - apt-get update && apt-get install -y curl
    - curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
  script:
    - syft dir:$CI_PROJECT_DIR -o syft-json=syft-sbom.json
  artifacts:
    paths:
      - syft-sbom.json
  rules:
    - when: always

grype:
  image: debian:stable-slim
  stage: scan
  before_script:
    - apt-get update && apt-get install -y curl
    - curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
  script:
    - grype sbom:syft-sbom.json 
  rules:
    - when: always


cypress tests:
  image: cypress/browsers:node-22.11.0-chrome-130.0.6723.69-1-ff-132.0-edge-130.0.2849.56-1
  stage: test-e2e
  services:
    - name: $IMAGE_SOURCE
      alias: oc-commerce
  script:
    # run Cypress tests
    - npm install cypress --save-dev
    - npx cypress run --browser firefox --config baseUrl=http://oc-commerce:8000
  rules:  
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH